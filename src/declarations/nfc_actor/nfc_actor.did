type UserId = principal;
type TokenId = nat;
type Time = int;
type Result_2 = 
 variant {
   err: text;
   ok: NFT;
 };
type Result_1 = 
 variant {
   err: text;
   ok: TokenId;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type PolicyId = nat;
type NFT = 
 record {
   id: TokenId;
   metadata: Metadata;
   owner: UserId;
 };
type Metadata = 
 record {
   attributes: vec record {
                     text;
                     text;
                   };
   createdAt: Time;
   description: text;
   image: opt text;
   name: text;
   policyId: PolicyId;
 };
service : {
  getNFT: (TokenId) -> (Result_2) query;
  getNFTByPolicy: (PolicyId) -> (Result_2) query;
  getUserNFTs: () -> (vec NFT) query;
  mintPolicyNFT: (PolicyId, text, text, opt text, vec record {
                                                        text;
                                                        text;
                                                      }) -> (Result_1);
  transferNFT: (TokenId, principal) -> (Result);
}
