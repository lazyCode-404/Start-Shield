<<<<<<< HEAD
type User = 
 record {
   accessLevel: AccessLevel;
   age: nat;
   email: text;
   name: text;
   timestamp: int;
 };
type Result_1 = 
 variant {
   err: text;
   ok: User;
 };
type Result = 
 variant {
   err: text;
   ok: text;
 };
type Company = 
 record {
   additionalInfo: text;
   address: Address;
   annualRevenue: nat;
   commission: nat;
   companyName: text;
   discount: nat;
   email: text;
   employees: nat;
   endDate: text;
   industryType: text;
   insuranceMonths: nat;
   insuranceType: text;
   insuredValue: nat;
   over18: bool;
   paymentOption: text;
   phone: text;
   policyValue: nat;
   premium: bool;
   registrationNumber: text;
   rewardPercentage: nat;
   startDate: text;
   termsAgreed: bool;
   tokensEarned: nat;
 };
type Address = 
 record {
   city: text;
   country: text;
   number: text;
   postalCode: text;
   state: text;
   street: text;
 };
type AccessLevel = 
 variant {
   ADMIN;
   GUEST;
   SUPER_ADMIN;
   USER;
 };
=======
type AssetCanisterArgs = variant { Upgrade : UpgradeArgs; Init : InitArgs };
type BatchId = nat;
type BatchOperationKind = variant {
  SetAssetProperties : SetAssetPropertiesArguments;
  CreateAsset : CreateAssetArguments;
  UnsetAssetContent : UnsetAssetContentArguments;
  DeleteAsset : DeleteAssetArguments;
  SetAssetContent : SetAssetContentArguments;
  Clear : ClearArguments;
};
type ChunkId = nat;
type ClearArguments = record {};
type CommitBatchArguments = record {
  batch_id : BatchId;
  operations : vec BatchOperationKind;
};
type CommitProposedBatchArguments = record {
  batch_id : BatchId;
  evidence : blob;
};
type ComputeEvidenceArguments = record {
  batch_id : BatchId;
  max_iterations : opt nat16;
};
type ConfigurationResponse = record {
  max_batches : opt nat64;
  max_bytes : opt nat64;
  max_chunks : opt nat64;
};
type ConfigureArguments = record {
  max_batches : opt opt nat64;
  max_bytes : opt opt nat64;
  max_chunks : opt opt nat64;
};
type CreateAssetArguments = record {
  key : Key;
  content_type : text;
  headers : opt vec HeaderField;
  allow_raw_access : opt bool;
  max_age : opt nat64;
  enable_aliasing : opt bool;
};
type DeleteAssetArguments = record { key : Key };
type DeleteBatchArguments = record { batch_id : BatchId };
type GrantPermission = record {
  permission : Permission;
  to_principal : principal;
};
type HeaderField = record { text; text };
type HttpRequest = record {
  url : text;
  method : text;
  body : blob;
  headers : vec HeaderField;
  certificate_version : opt nat16;
};
type HttpResponse = record {
  body : blob;
  headers : vec HeaderField;
  streaming_strategy : opt StreamingStrategy;
  status_code : nat16;
};
type InitArgs = record { set_permissions : opt SetPermissions };
type Key = text;
type ListPermitted = record { permission : Permission };
type Permission = variant { Prepare; ManagePermissions; Commit };
type RevokePermission = record {
  permission : Permission;
  of_principal : principal;
};
type SetAssetContentArguments = record {
  key : Key;
  sha256 : opt blob;
  chunk_ids : vec ChunkId;
  content_encoding : text;
};
type SetAssetPropertiesArguments = record {
  key : Key;
  headers : opt opt vec HeaderField;
  is_aliased : opt opt bool;
  allow_raw_access : opt opt bool;
  max_age : opt opt nat64;
};
type SetPermissions = record {
  prepare : vec principal;
  commit : vec principal;
  manage_permissions : vec principal;
};
type StreamingCallbackHttpResponse = record {
  token : opt StreamingCallbackToken;
  body : blob;
};
type StreamingCallbackToken = record {
  key : Key;
  sha256 : opt blob;
  index : nat;
  content_encoding : text;
};
type StreamingStrategy = variant {
  Callback : record {
    token : StreamingCallbackToken;
    callback : func (StreamingCallbackToken) -> (
        opt StreamingCallbackHttpResponse,
      ) query;
  };
};
type Time = int;
type UnsetAssetContentArguments = record { key : Key; content_encoding : text };
type UpgradeArgs = record { set_permissions : opt SetPermissions };
type ValidationResult = variant { Ok : text; Err : text };
>>>>>>> cab7a48bfd1554dab43c795654e43d2f4b1aa8a8
service : {
  addCompanyForUser: (principal, Company) -> (text);
  addUser: (principal, User) -> (text);
  createUser: (principal, User) -> (text);
  deleteUser: (principal) -> (text);
  getAllUsers: () -> (vec User) query;
  getCompanyForUser: (principal) -> (opt Company);
  getUser: (principal) -> (Result_1) query;
  getUserAccessLevel: (principal) -> (Result) query;
  getUserByPrincipal: (principal) -> (opt User);
}
