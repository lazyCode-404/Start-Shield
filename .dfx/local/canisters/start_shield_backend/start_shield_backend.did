type UserResponse = 
 record {
   accessLevel: AccessLevel;
   adminStatus: AdminStatus;
   age: nat;
   email: text;
   name: text;
   phone: opt text;
   photo: opt vec nat8;
   photoId: opt text;
   "principal": principal;
   timestamp: int;
   userAddress: opt UserAddress;
 };
type UserId = principal;
type UserAddress = 
 record {
   city: opt text;
   country: opt text;
   number: opt text;
   postalCode: opt text;
   state: opt text;
   street: opt text;
 };
type User = 
 record {
   accessLevel: AccessLevel;
   adminStatus: AdminStatus;
   age: nat;
   email: text;
   name: text;
   timestamp: int;
 };
type Time = int;
type Result_2 = 
 variant {
   err: text;
   ok: PaymentId;
 };
type Result_1 = 
 variant {
   err: text;
   ok: text;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type PaymentStatus = 
 variant {
   completed;
   failed;
   pending;
   refunded;
 };
type PaymentId = nat;
type Payment = 
 record {
   amount: Amount;
   from: UserId;
   id: PaymentId;
   status: PaymentStatus;
   timestamp: Time;
   to: UserId;
 };
type Company = 
 record {
   additionalInfo: text;
   address: Address;
   annualRevenue: nat;
   commission: nat;
   companyName: text;
   discount: nat;
   email: text;
   employees: nat;
   endDate: text;
   industryType: text;
   insuranceMonths: nat;
   insuranceType: text;
   insuredValue: nat;
   over18: AcceptanceStatus;
   paymentOption: text;
   phone: text;
   policyValue: nat;
   premium: AcceptanceStatus;
   registrationNumber: text;
   rewardPercentage: nat;
   startDate: text;
   taxId: text;
   termsAgreed: AcceptanceStatus;
   tokensEarned: nat;
 };
type Amount = nat;
type AdminStatus = 
 variant {
   Approved;
   NotRequested;
   Pending;
   Rejected;
 };
type Address = 
 record {
   city: text;
   country: text;
   number: text;
   postalCode: text;
   state: text;
   street: text;
 };
type AccessLevel = 
 variant {
   ADMIN;
   GUEST;
   SUPER_ADMIN;
   USER;
 };
type AcceptanceStatus = 
 variant {
   accepted;
   declined;
 };
service : {
  addCompany: ("principal": principal, company: Company) -> (bool);
  addUser: ("principal": principal, user: User) -> (text);
  checkAccessLevel: (user: principal, requiredLevel: AccessLevel) ->
   (bool) query;
  completePayment: (paymentId: PaymentId) -> (Result);
  createPayment: (to: UserId, amount: Amount) -> (Result_2);
  createUser: (caller: principal, args: User) -> (text);
  deposit: () -> ();
  getAdminStatus: ("principal": principal) -> (AdminStatus) query;
  getAllUsers: () -> (vec UserResponse) query;
  getBalance: () -> (Amount) query;
  getCallerPrincipal: () -> (principal);
  getCompany: ("principal": principal) -> (opt Company) query;
  getCompanyForUser: (caller: principal) -> (opt Company) query;
  getPayment: (paymentId: PaymentId) -> (opt Payment) query;
  getPendingAdmins: () -> (vec record {
                                 principal;
                                 User;
                               }) query;
  getUserAccessLevel: (caller: principal) -> (Result_1) query;
  getUserById: (userId: principal) -> (opt UserResponse) query;
  getUserByPrincipal: (caller: principal) -> (opt User);
  handleAdminApproval: ("principal": principal, status: AdminStatus) ->
   (Result_1);
  healthCheck: () -> (text) query;
  refundPayment: (paymentId: PaymentId) -> (Result);
  requestAdminAccess: () -> (text);
  secureAdminOperation: () -> (text);
  updateUser: (userId: principal, name: text, email: text, userAddress:
   opt Address, phone: opt text, photo: opt blob, photoId: opt text) ->
   (bool);
}
